#!/usr/bin/env ruby

# A simple "todo" list for today - by Kevin Hutchinson

require 'yaml'

class Today

  def show_help
    puts <<End_of_help
This is a simple "todo" list for today's tasks.
Here's how to use the "today" command:

> today help              - show this help info
> today                   - list all tasks to finish today
> today list Bob          - list all tasks matching "Bob"
> today get it finished   - add the task "get it finished"
> today first ask Bob     - add "ask Bob" as a first task
> today done              - remove top item from the list
> today done 2 3          - remove items 2 & 3 from the list
> today first 4 5         - move items 4 & 5 to top of list
> today last 6 7          - move items 6 & 7 to end of list

End_of_help
  end

  TODAY_HOST = ENV['TODAY_HOST'] # optionally where to sync - a remote hostname
  TODAY_USER = ENV['TODAY_USER'] || ENV['USER'] # the optional user for syncing
  TODAY_PASS = ENV['TODAY_PASS'] # not needed with ".ssh/authorized_keys2" file
  TODAY_FILE = ENV['TODAY_FILE'] || ".#{$0}" # the command name (allow aliases)
  TODAY_PATH = File.join(ENV['HOME'], TODAY_FILE)
  ARCHIVE_PATH = TODAY_PATH + '-archive'

  def initialize
    @task_list = load_tasks()
    parse_command()
  end

  def parse_command
    cmd = $1 if ARGV[0] =~ /^-*(\w+)$/
    args = ARGV[1..-1]
    return show_help() if cmd == 'help' && args.count == 0

    case cmd
    when 'done'
      delete_tasks(args)
    when 'first'
      if args[0].to_i > 0
        move_tasks(args, :first)
      elsif args.count > 0
        add_task(args.join(' '))
        move_tasks([@task_list.count], :first)
      end
    when 'list'
      return list_tasks(args)
    when 'last'
      move_tasks(args, :last)
    else
      add_task(ARGV.join(' ')) if ARGV.count > 0
    end
    show_task_list() or show_help()
  end

  def add_task(task)
    @task_list.push(task)
    save_tasks()
  end

  def delete_tasks(args)
    completed_tasks = []
    args = ['1'] if args.count == 0 # delete the first task by default
    args.each do |arg|
      i = (arg == 'last' ? @task_list.count : arg.to_i)
      i = 1 if i < 1
      completed_tasks << @task_list[i-1]
      @task_list[i-1] = nil
    end
    @task_list = @task_list.select { |task| task != nil }
    save_tasks()
    archive_tasks(completed_tasks)
  end

  def list_tasks(args)
    tasks = []
    @task_list.each do |task|
      is_match = (args.count == 0)
      args.each do |arg|
        is_match = true if task =~ Regexp.new(arg, true) # case insensitive
      end
      tasks << (is_match ? task : nil)
    end
    show_task_list(tasks)
  end

  def move_tasks(args, place) # put the selected task in first or last place
    moved = []
    args.each do |arg|
      i = arg.to_i
      i = 1 if i < 1
      if i <= @task_list.count
        moved << @task_list[i-1]
        @task_list[i-1] = nil
      end
    end
    static = @task_list.select { |task| task != nil }
    @task_list = case place
    when :first; moved + static
    when :last; static + moved
    end
    save_tasks()
  end

  def load_tasks
    sync_tasks(:get)
    return File.exist?(TODAY_PATH) ? YAML.load_file(TODAY_PATH) : []
  end

  def save_tasks
    File.open(TODAY_PATH, 'w') do |f|
      f.write @task_list.to_yaml
    end
    sync_tasks(:put)
  end

  def archive_tasks(completed_tasks)
    File.open(ARCHIVE_PATH, 'a') do |f|
      f.write "#{Time.now} #{completed_tasks.to_yaml}"
    end
  end

  def sync_tasks(action)
    return unless TODAY_HOST
    require 'net/scp'
    local = TODAY_PATH
    remote = TODAY_FILE
    case action
    when :put
      Net::SCP.upload!(TODAY_HOST, TODAY_USER, local, remote, :password => TODAY_PASS)
    when :get
      Net::SCP.download!(TODAY_HOST, TODAY_USER, remote, local, :password => TODAY_PASS)
    end
  end

  def show_task_list(tasks = nil)
    tasks ||= @task_list
    showing = 0
    puts
    tasks.each_with_index do |task, i|
      next unless task
      showing += 1
      puts "[#{i+1}] #{task}" # e.g. "[1] get it finished"
    end
    puts "No tasks found" unless showing > 0
    puts
    return @task_list.count > 0 # i.e. did we show anything?
  end
end

Today.new

__END__
