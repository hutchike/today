#!/usr/bin/env ruby

# A simple "todo" list for today - by Kevin Hutchinson

require 'yaml'

class Today

  def show_help
    puts <<End_of_help
This is a simple "todo" list for today's tasks.
Here's how to use the "today" command:

> today help              - show this help info
> today                   - list all tasks to finish today
> today get it finished   - add the task "get it finished"
> today done              - remove top item from the list
> today done 2 3          - remove items 2 & 3 from the list
> today first 4 5         - move items 4 & 5 to top of list
> today last 6 7          - move items 6 & 7 to end of list

End_of_help
  end

  TODAY_HOST = ENV['TODAY_HOST'] # optionally where to sync - a remote hostname
  TODAY_USER = ENV['TODAY_USER'] || ENV['USER'] # the optional user for syncing
  TODAY_PASS = ENV['TODAY_PASS'] # not needed with ".ssh/authorized_keys2" file
  TODAY_FILE = ENV['TODAY_FILE'] || '.today'
  TODAY_PATH = File.join(ENV['HOME'], TODAY_FILE)

  def initialize
    @task_list = load_tasks()
    parse_command()
  end

  def parse_command
    cmd = $1 if ARGV[0] =~ /^-*(\w+)$/
    args = ARGV[1..-1]
    return show_help() if cmd == 'help' && args.count == 0

    case cmd
    when 'done'
      delete_task(args)
    when 'first'
      move_task(args, :first)
    when 'last'
      move_task(args, :last)
    else
      add_task(ARGV.join(' ')) if ARGV.count > 0
    end
    show_task_list() or show_help()
  end

  def add_task(task)
    @task_list.push(task)
    save_tasks()
  end

  def delete_task(args)
    args = ['1'] if args.count == 0 # delete the first task by default
    args.each do |arg|
      i = (arg == 'last' ? @task_list.count : arg.to_i)
      i = 1 if i < 1
      @task_list[i-1] = nil
    end
    @task_list = @task_list.select { |task| task != nil }
    save_tasks()
  end

  def move_task(args, place) # put the selected task in first or last place
    first, middle, last = [], [], []
    moves = {}
    args.each do |arg|
      i = arg.to_i
      i = 1 if i < 1
      moves[i] = place
    end
    @task_list.each_with_index do |task, i|
      case moves[i+1]
      when :first; first << task
      when :last; last << task
      else; middle << task
      end
    end
    @task_list = first + middle + last
    save_tasks()
  end

  def load_tasks
    sync_tasks(:get)
    return File.exist?(TODAY_PATH) ? YAML.load_file(TODAY_PATH) : []
  end

  def save_tasks
    File.open(TODAY_PATH, 'w') do |f|
      f.write @task_list.to_yaml
    end
    sync_tasks(:put)
  end

  def sync_tasks(action)
    return unless TODAY_HOST
    require 'net/scp'
    local = TODAY_PATH
    remote = TODAY_FILE
    case action
    when :put
      Net::SCP.upload!(TODAY_HOST, TODAY_USER, local, remote, :password => TODAY_PASS)
    when :get
      Net::SCP.download!(TODAY_HOST, TODAY_USER, remote, local, :password => TODAY_PASS)
    end
  end

  def show_task_list
    puts
    @task_list.each_with_index do |task, i|
      puts "[#{i+1}] #{task}" # e.g. "[1] get it finished"
    end
    puts
    return @task_list.count > 0 # i.e. did we show anything?
  end
end

Today.new

__END__
